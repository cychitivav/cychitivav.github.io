---

---

<header {...Astro.props}>
	<nav>
		<div class="hamburger"><span></span><span></span><span></span></div>
		<div class="overlay"></div>

		<span class="underline"></span>
		
		<ul>
			<li><a href="/">Home</a></li>
			<li><a href="#">About Me</a></li>
			<li><a href="#">Experience</a></li>
			<li><a href="#">Projects</a></li>
			<li><a href="#" class="contact">Get in Touch</a></li>
		</ul>
	</nav>
</header>

<style lang="scss">
	nav {
		display: flex;
		align-items: center;
		justify-content: flex-end;
		border-radius: 1.5em;
		overflow: hidden;

		position: fixed;
		padding: 5px;
		top: 10px;
		right: 10px;
		z-index: 2;

		// Background for scroll
		// background: #b4b4b42b;
		// backdrop-filter: blur(10px);
	}

	ul,
	li {
		display: contents;
		list-style: none;
	}

	a:not(.contact) {
		padding: 5px 10px;

		&:hover {
			filter: brightness(1.2);
		}
	}

	a.contact {
		border: 1px solid #fff;
		border-radius: 1em;
		padding: 5px 15px;
		margin-left: 10px;
		transition: all 0.3s;

		&:hover {
			background-color: #fff;
			color: #000;
		}
	}

	nav:has(a:not(.contact):hover) .underline {
		opacity: 1;
		background: linear-gradient(90deg, #004236, #2f8872, #004236);
	}

	nav:hover .underline {
		animation: move 0.3s;
	}

	.underline {
		opacity: 0;
		width: 10px;
		height: 2px;
		background-color: transparent;
		align-self: flex-end;
		position: absolute;
		transition: all 0.3s;
		z-index: 100;
	}

	.overlay {
		opacity: 0;
		transition: opacity var(--animation-time);
	}

	@keyframes move {
		from {
			transform: translateX(50%);
		}
		to {
			transform: translateX(0);
		}
	}

	@media (width <= 768px) {
		.overlay {
			background: #ffffff93;
			backdrop-filter: blur(5px);

			position: fixed;
			top: 0;
			left: 0;

			width: 100vw;
			height: 100vh;

			z-index: -100;
			// backdrop-filter: blur(10px);
		}

		nav {
			display: contents;
			--animation-time: 0.4s;
		}

		ul {
			position: fixed;
			top: 0;
			right: 0;
			z-index: 100;
			height: 100vh;
			width: 80vw;

			display: flex;
			flex-direction: column;
			align-items: center;

			background-color: #fff;
			color: #000;

			transform: translateX(100%);
			transition: transform var(--animation-time);
		}

		.hamburger {
			position: fixed;
			top: 20px;
			right: 20px;
			z-index: 10;

			display: flex;
			flex-direction: column;
			justify-content: space-between;
			align-items: flex-start;

			width: 35px;
			height: 25px;
			cursor: pointer;
			transition: transform var(--animation-time);

			span {
				display: block;
				width: 30px;
				height: 3px;
				background-color: #fff;
				transition: all var(--animation-time);

				&:nth-child(odd) {
					align-self: flex-end;
				}
			}
		}

		.hamburger.open {
			transform: translateX(-80vw);
			filter: invert(1) hue-rotate(180deg);

			span:nth-child(1) {
				transform: translate(-2.45px, 7px) rotate(180deg + 45deg);
				width: 15px;
			}

			span:nth-child(2) {
				transform: rotate(180deg);
			}

			span:nth-child(3) {
				transform: translate(-2.45px, -7px) rotate(180deg - 45deg);
				width: 15px;
			}

			~ ul {
				transform: translateX(0);
			}
		}
	}

	@media (prefers-color-scheme: light) {
		li:last-child a {
			border-color: #000;

			&:hover {
				background-color: #000;
				color: #fff;
			}
		}

		nav:has(li:not(:last-child):hover) .underline {
			background: linear-gradient(90deg, #004236, #2f8872, #004236);
		}

		.hamburger span {
			background-color: #000;
		}

		.overlay {
			background: #00000093;
		}
	}
</style>

<script>
	const links = document.querySelectorAll(
		"nav ul li:not(:last-child) a",
	) as NodeListOf<HTMLAnchorElement>
	const underline = document.querySelector(".underline") as HTMLSpanElement

	links.forEach((link) => {
		link.addEventListener("mouseover", () => {
			underline.style.left = `${link.offsetLeft}px`
			underline.style.width = `${link.offsetWidth}px`
		})
	})

	underline.parentElement.addEventListener("mouseleave", () => {
		underline.style.width = "0"
		underline.style.left = "unset"
	})
</script>

<script>
	const hamburger = document.querySelector(".hamburger") as HTMLDivElement
	const overlay = document.querySelector(".overlay") as HTMLDivElement

	hamburger.addEventListener("click", () => {
		hamburger.classList.toggle("open")
		overlay.style.opacity = hamburger.classList.contains("open") ? "1" : "0"
		overlay.style.zIndex = hamburger.classList.contains("open") ? "1" : "-100"
	})
</script>
